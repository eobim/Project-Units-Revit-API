using Autodesk.Revit.Attributes;
using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.DB;
using Autodesk.Revit.Creation;
using Autodesk.Revit.UI;

namespace ProjectUnits
{
	
	[Transaction(TransactionMode.Manual)]
	public class FormatUnits : IExternalCommand
	{
		
		public Result Execute(ExternalCommandData commandData, ref string message, ElementSet elements)
		{

			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			// 1. Store the "ActiveUIDocument"
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			
			
			Autodesk.Revit.DB.Document doc = commandData.Application.ActiveUIDocument.Document;
			
			
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			// 2. Obtain unit system to instantiate "Units" class
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			
			
			Autodesk.Revit.DB.UnitSystem unsys = Autodesk.Revit.DB.UnitSystem.Metric;//Imperial;//
			
			
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			// 3. Instantiate "Units" class
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			
			
			Autodesk.Revit.DB.Units proj_units = new Autodesk.Revit.DB.Units(
				unsys
			);
			
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			// 4. Obtain "ForgeTypeId"s for "SetFormatOptions" method
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			
			
			ForgeTypeId ftid_Distance = Autodesk.Revit.DB.SpecTypeId.Distance;
			
				ForgeTypeId ftid_Length = Autodesk.Revit.DB.SpecTypeId.Length;
			
			
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			// 5. Obtain unitTypeId ForgeTypeId to instantiate Format
			// options
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			
			
			ForgeTypeId ftid_utid = Autodesk.Revit.DB.UnitTypeId.Meters;

			
			////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////
			// 6. Instantiate "FormatOptions" for "SetFormatOptions" method
			////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////

			
			Autodesk.Revit.DB.FormatOptions fo = new Autodesk.Revit.DB.FormatOptions(
					ftid_utid
				);
			
			
			////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////
			// 7. Customize formattiingOptions properties
			////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////
			
			
			fo.Accuracy = 0.0001;
			//fo.IsValidObject
			fo.RoundingMethod = Autodesk.Revit.DB.RoundingMethod.Nearest;
			fo.SuppressLeadingZeros = false;
			fo.SuppressSpaces = false;
			fo.SuppressTrailingZeros = true;
			fo.UseDefault = false;
			fo.UseDigitGrouping = true;
			fo.UsePlusPrefix = true;
			
			
			////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////
			// 8. SetFormatOptions on Units object
			////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////
			
			
			proj_units.SetFormatOptions(
			
				ftid_Distance,
				fo

			);
			
			proj_units.SetFormatOptions(
			
				ftid_Length,
				fo

			);
			
			
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			// 9. Change document units inside of transaction
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			
			
			using (Transaction set_units = new Transaction(doc,"Change units")) 
			{
				set_units.Start();
				
				
					doc.SetUnits(
						proj_units
					);
				
				set_units.Commit();
			}
			
			
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			// 10. Test task dialog
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			
			
			TaskDialog testDialog = new TaskDialog("Test dialog");
			
			testDialog.MainInstruction = "Success!"
			+
			"\n"
			+
			"\n"
			+
			"Please check the units dialog in the manage tab to check if the correspondant unit formatting options were changed!";
			
			testDialog.MainContent = "This script changes the units formatting, but the units passed in operations with Revit API scripts are still made in feets." 
			+ 
			"\n"
			+
			"\n" 
			+
			"So far, I have conducted operations in meters multipliying the values passed  (that the RevitAPI interprets in feets) per \"3.280839895\", in order to convert them from feet to meters."
			;
			
			testDialog.Show();
			
			
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			// 11. End Execute method
			///////////////////////////////////////////////////////
			///////////////////////////////////////////////////////
			
			
			return Result.Succeeded;
			
			
		}
	}
}